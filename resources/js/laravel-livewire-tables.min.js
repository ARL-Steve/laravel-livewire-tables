document.addEventListener("alpine:init", () => { Alpine.data("tableWrapper", (e, t) => ({ filtersOpen: e.entangle("filterSlideDownDefaultVisible"), paginationCurrentCount: e.entangle("paginationCurrentCount").live, paginationTotalItemCount: e.entangle("paginationTotalItemCount").live, paginationCurrentItems: e.entangle("paginationCurrentItems").live, selectedItems: e.entangle("selected"), alwaysShowBulkActions: !e.entangle("hideBulkActionsWhenEmpty"), reorderStatus: e.entangle("reorderStatus").live, reorderCurrentStatus: e.entangle("currentlyReorderingStatus"), reorderHideColumnUnlessReordering: e.entangle("hideReorderColumnUnlessReorderingStatus"), reorderDisplayColumn: !1, toggleSelectAll() { t && (this.paginationTotalItemCount == this.selectedItems.length ? this.clearSelected() : this.setAllSelected()) }, setAllSelected() { t && e.setAllSelected() }, clearSelected() { t && e.clearSelected() }, selectAllOnPage() { if (!t) return; let e = this.selectedItems, r = this.paginationCurrentItems.values(); for (let n of r) e.push(n.toString()); this.selectedItems = [...new Set(e)] }, reorderToggle() { this.reorderCurrentStatus = !this.reorderCurrentStatus, this.reorderDisplayColumn = !this.reorderDisplayColumn }, init() { this.reorderCurrentStatus ? this.reorderDisplayColumn = !0 : this.reorderHideColumnUnlessReordering || (this.reorderDisplayColumn = !0) } })), Alpine.data("reorderFunction", (e, t) => ({ dragging: !1, sourceID: "", targetID: "", evenRowClasses: "", oddRowClasses: "", evenRowClassArray: {}, oddRowClassArray: {}, evenNotInOdd: {}, oddNotInEven: {}, orderedRows: [], dragStart(e) { dragging = !0, sourceID = e.target.id, e.dataTransfer.effectAllowed = "move", e.dataTransfer.setData("text/plain", e.target.id) }, dropEvent() { removing = !1 }, dropPreventEvent(e) { var r = e.dataTransfer.getData("text/plain"), n = e.target.closest("tr"), s = e.target.closest("tr").parentNode, o = document.getElementById(r).closest("tr"), a = o.rowIndex, l = n.rowIndex, d = document.getElementById(t), i = a; l < a && (i = l), s.insertBefore(o, n.nextSibling); var g = "even"; this.orderedRows = []; for (var u, c = 2; u = d.rows[c]; c++)u.classList.contains("hidden") || (this.orderedRows.push(u.getAttribute("rowpk")), "even" == g ? (u.classList.remove(...this.oddNotInEven), u.classList.add(...this.evenNotInOdd), g = "odd") : (u.classList.remove(...this.evenNotInOdd), u.classList.add(...this.oddNotInEven), g = "even")) }, updateOrderedItems() { e.set("orderedItems", this.orderedRows) }, init() { var e = document.getElementById(t).getElementsByTagName("tbody")[0]; let r = Array.from(e.rows[4].classList), n = Array.from(e.rows[6].classList); this.evenNotInOdd = r.filter(e => !n.includes(e)), this.oddNotInEven = n.filter(e => !r.includes(e)) } })) });
